export enum QUEUES {
    REPORT = 'DMS_REPORT',
    SYNC = 'DMS_SYNC',
    SYNC_EXTERNAL = 'DMS_SYNC_EXTERNAL',
    SYNC_STORAGE = 'DMS_SYNC_STORAGE',
    SYNC_ORDER_STORAGE = 'DMS_SYNC_ORDER_STORAGE',
    SYNC_HISTORY_STORAGE = 'DMS_SYNC_HISTORY_STORAGE',
    HISTORY = 'DMS_HISTORY',
    CRONJOB = 'DMS_CRONJOB',
    MOBILE = 'DMS_MOBILE',
    PORTAL = 'DMS_PORTAL',
    STORAGE = 'DMS_STORAGE',
    SOCKET = 'DMS_SOCKET',
    // ACTION_HISTORY = 'DMS_ACTION_HISTORY',
    // SAVE_HISTORY = 'DMS_SAVE_HISTORY',
    MAP_LOCATION = 'DMS_MAP_LOCATION',
    CALCULATE_KPI = 'DMS_CALCULATE_KPI',
    ECOPAY = 'DMS_ECOPAY',
    TELEGRAM = 'DMS_TELEGRAM',
    FIREBASE = 'DMS_FIREBASE',
    MERCHANT = 'DMS_MERCHANT',
    SUMMARY_REPORT = 'DMS_SUMMARY_REPORT',
    // SUMMARY_REPORT_BACKUP = 'DMS_SUMMARY_REPORT_BACKUP',
    // SUMMARY_REPORT_GENERATE_DATA = 'SUMMARY_REPORT_GENERATE_DATA',
    // SUMMARY_REPORT_SAVE_TEMP_ORDER = 'DMS_SUMMARY_REPORT_SAVE_TEMP_ORDER',
    KPI_REPORT = 'DMS_KPI_REPORT',
    // KPI_REPORT_MULTI_THREADS = 'DMS_KPI_REPORT_MULTI_THREADS',
    // KPI_REPORT_UPDATE = 'DMS_KPI_REPORT_UPDATE',
    // KPI_TARGET_CREATE_OR_UPDATE = 'DMS_KPI_TARGET_CREATE_OR_UPDATE',
    // KPI_DAILY_TARGET = 'DMS_KPI_DAILY_TARGET',
    INIT_REAL_ROUTE = 'DMS_INIT_REAL_ROUTE',
    HEALTH_CRONJOB = 'DMS_HEALTH_CRONJOB',
    HEALTH_CLOUD = 'DMS_HEALTH_CLOUD',
    HEALTH_HISTORY = 'DMS_HEALTH_HISTORY',
    HEALTH_MOBILE = 'DMS_HEALTH_MOBILE',
    HEALTH_PORTAL = 'DMS_HEALTH_PORTAL',
    HEALTH_STORAGE = 'DMS_HEALTH_STORAGE',
    HEALTH_THIRD_PARTY_EXTERNAL = 'DMS_HEALTH_THIRD_PARTY_EXTERNAL',
    HEALTH_ASSET = 'DMS_HEALTH_ASSET',
    HEALTH_MESSAGE = 'DMS_HEALTH_MESSAGE',
    HEALTH_SYNC = 'DMS_HEALTH_SYNC',
    HEALTH_REPORT_READ = 'DMS_HEALTH_REPORT_READ',
    HEALTH_SCHEDULER = 'DMS_HEALTH_SCHEDULER',
    HEALTH_REPORT_WRITE = 'DMS_HEALTH_REPORT_WRITE',
    HEALTH_KPI_REPORT = 'DMS_HEALTH_KPI_REPORT',
    // SUMMARY_REPORT_ORDER_DETAIL = 'DMS_SUMMARY_REPORT_ORDER_DETAIL',
    // SUMMARY_REPORT_ORDER_DETAIL_BACKUP = 'DMS_SUMMARY_REPORT_ORDER_DETAIL_BACKUP',
    // SUMMARY_REPORT_ERROR_LOG = 'DMS_SUMMARY_REPORT_ERROR_LOG',
    // SUMMARY_REPORT_COMPLETE_TASK = 'DMS_SUMMARY_REPORT_COMPLETE_TASK',
    // ACTIVE_REACTIVE_STORE = 'DMS_ACTIVE_REACTIVE_STORE',
    // STORAGE_CRONJOB = 'STORAGE_CRONJOB',
    GROUP = 'DMS_GROUP',
    THIRD_PARTY_TRANSPORT = 'DMS_THIRD_PARTY_TRANSPORT',
    // ROUTE = 'DMS_ROUTE',
    // EVENT = 'DMS_EVENT',
    // ACCUMULATE_PROCESS = 'DMS_CALCULATE_EVENT_ACCUMULATE_PROCESS',
    SCHEDULER = 'DMS_SCHEDULER',
    COMPRESS_REPORT = 'COMPRESS_REPORT',
    HEALTH_RABBIT_MQ = 'DMS_HEALTH_RABBIT_MQ',
    EXPORT_FILE = 'DMS_EXPORT_FILE',
    EXPORT_FILE_STATUS = 'DMS_EXPORT_FILE_STATUS',
    EXPORT_FILE_DATA = 'DMS_EXPORT_FILE_DATA',
    // ASSET = 'DMS_ASSET',
    HEALTH_SOCKET = 'DMS_HEALTH_SOCKET',
    THIRD_PARTY_EXTERNAL = 'DMS_THIRD_PARTY_EXTERNAL',
    // PROCESS_IMPORT_TO_STORAGE = 'DMS_PROCESS_IMPORT_STORAGE',
    // PROCESS_IMPORT_CHANGE_STATUS = 'DMS_PROCESS_IMPORT_CHANGE_STATUS',
    // THIRD_PARTY_INTEGRATE = 'DMS_THIRD_PARTY_INTEGRATE',
    DATA_SYNC_TO_DMS_STORE_DISTRIBUTOR = 'DATA_SYNC_TO_DMS_STORE_DISTRIBUTOR',
    DMS_TO_DATA_SYNC_STORE_DISTRIBUTOR = 'DMS_TO_DATA_SYNC_STORE_DISTRIBUTOR',
    DATA_SYNC_TO_DMS_ORDER = 'DATA_SYNC_TO_DMS_ORDER',
    PLAN_ROUTE_REPORT = 'DMS_PLAN_ROUTE_REPORT',
    // REPORT_MOBILE = 'DMS_REPORT_MOBILE',
    // STORAGE_ROUTE = 'DMS_STORAGE_ROUTE',
    // STORAGE_REAL_ROUTE = 'DMS_STORAGE_REAL_ROUTE',
    // REPORT_WRITE = 'DMS_REPORT_WRITE',
    DMS_REPORT_READ_PORTAL = 'DMS_REPORT_READ_PORTAL',
    DMS_REPORT_READ_PLAN_ROUTE = 'DMS_REPORT_READ_PLAN_ROUTE',
    DMS_REPORT_READ_MOBILE = 'DMS_REPORT_READ_MOBILE',
    DMS_REPORT_UPDATE_STATUS = 'DMS_REPORT_UPDATE_STATUS',
    DMS_SAVE_HISTORY = 'DMS_SAVE_HISTORY',
    DMS_REPORT_COMPRESS_EXPORT = 'DMS_REPORT_COMPRESS_EXPORT',
    DMS_REPORT_GET_DATA = 'DMS_REPORT_GET_DATA',
}

export const getPriorityQueueReport = (len: number) => {
    if (len < 100) return 99;
    if (len < 1000) return 98;
    if (len < 10000) return 97;
    for (let i = 96, j = 50000; i >= 0; i--, j += 50000) {
        if (len < j) return i;
    }
    return 0;
};

export const getRMQPrefetchCount = (queue: string): number => {
    switch (queue as keyof typeof QUEUES) {
        case 'COMPRESS_REPORT':
            return 2;
            // case 'SUMMARY_REPORT_ORDER_DETAIL':
            return 2;
        case 'SUMMARY_REPORT':
            // case 'SUMMARY_REPORT_SAVE_TEMP_ORDER':
            // case 'KPI_TARGET_CREATE_OR_UPDATE':
            // case 'SUMMARY_REPORT_GENERATE_DATA':
            return 3;
        default:
            return 3;
    }
};
