import { DMS_SAVE_HISTORY } from '@app/shared/microservices/rabbitmq/config/history-save-history.config';
import { DMS_SCHEDULER_EVENT_ACCUMULATE } from '@app/shared/microservices/rabbitmq/config/scheduler-event-accumulate.config';
import { DMS_SCHEDULER_EVENT } from '@app/shared/microservices/rabbitmq/config/scheduler-event.config';
import { DMS_STORAGE_EVENT_ACCUMULATE } from '@app/shared/microservices/rabbitmq/config/storage-event-accumulate.config';
import { DMS_STORAGE_PROCESS_IMPORT } from '@app/shared/microservices/rabbitmq/config/storage-process-import.config';
import { DMS_STORAGE_THIRD_PARTY_INTEGRATE } from '@app/shared/microservices/rabbitmq/config/storage-thirdparty-integrate.config';
import { RmqClientOptions } from '../types/dynamic-module.type';
import { DMS_SAVE_ACTION_HISTORY } from './history-save-action.config';
import { DMS_REPORT_READ_MOBILE } from './report-read-mobile.config';
import {
  DMS_REPORT_COMPRESS_EXPORT,
  DMS_REPORT_GET_DATA,
  DMS_REPORT_READ_PLAN_ROUTE,
  DMS_REPORT_READ_PORTAL,
  DMS_REPORT_UPDATE_STATUS,
} from './report-read-portal.config';
import {
  DMS_REPORT_SYNC_DATABASE,
  DMS_REPORT_SYNC_DATABASE_CHECKSUM,
  DMS_REPORT_SYNC_DATABASE_EVENT,
  DMS_REPORT_SYNC_DATABASE_INVENTORY,
  DMS_REPORT_SYNC_DATABASE_ORDER,
  DMS_REPORT_SYNC_DATABASE_ROUTE,
  DMS_REPORT_SYNC_DATABASE_STORE,
} from './report-sync-db.config';
import { DMS_REPORT_SYNC } from './report-sync.config';
import { DMS_REPORT_WRITE_GENERATE_DATA } from './report-write-generate-data.config';
import { DMS_REPORT_WRITE_KPI } from './report-write-kpi.config';
import {
  DMS_REPORT_WRITE_CONSISTENCY,
  DMS_REPORT_WRITE_ROUTE,
} from './report-write-route.config';
import {
  DMS_REPORT_WRITE,
  DMS_REPORT_WRITE_COMPRESS,
  DMS_REPORT_WRITE_ORDER_DETAIL,
  DMS_REPORT_WRITE_SUMMARY_REPORT,
} from './report-write.config';
import { DMS_STORAGE_EVENT } from './storage-event.config';
import {
  DMS_STORAGE_REAL_ROUTE,
  DMS_STORAGE_ROUTE,
} from './storage-route.config';
import { DMS_STORAGE } from './storage.config';
import { DMS_SYNC_DATA } from './sync.config';

export enum ENUM_QUEUES {
  DMS_REPORT_READ_MOBILE = 'DMS_REPORT_READ_MOBILE',
  DMS_STORAGE_EVENT = 'DMS_STORAGE_EVENT',
  DMS_REPORT_READ_PORTAL = 'DMS_REPORT_READ_PORTAL',
  DMS_REPORT_SYNC = 'DMS_REPORT_SYNC',
  DMS_STORAGE = 'DMS_STORAGE',
  DMS_STORAGE_ROUTE = 'DMS_STORAGE_ROUTE',
  DMS_STORAGE_REAL_ROUTE = 'DMS_STORAGE_REAL_ROUTE',
  DMS_REPORT_WRITE = 'DMS_REPORT_WRITE',
  DMS_REPORT_WRITE_GENERATE_DATA = 'DMS_REPORT_WRITE_GENERATE_DATA',
  DMS_REPORT_WRITE_KPI = 'DMS_REPORT_WRITE_KPI',
  DMS_STORAGE_EVENT_ACCUMULATE = 'DMS_STORAGE_EVENT_ACCUMULATE',
  DMS_STORAGE_THIRD_PARTY_INTEGRATE = 'DMS_STORAGE_THIRD_PARTY_INTEGRATE',
  DMS_STORAGE_PROCESS_IMPORT = 'DMS_STORAGE_PROCESS_IMPORT',
  DMS_REPORT_READ_PLAN_ROUTE = 'DMS_REPORT_READ_PLAN_ROUTE',
  DMS_SAVE_HISTORY = 'DMS_SAVE_HISTORY',
  DMS_SAVE_ACTION_HISTORY = 'DMS_SAVE_ACTION_HISTORY',
  DMS_SCHEDULER_EVENT = 'DMS_SCHEDULER_EVENT',
  DMS_SCHEDULER_EVENT_ACCUMULATE = 'DMS_SCHEDULER_EVENT_ACCUMULATE',
  DMS_REPORT_WRITE_ROUTE = 'DMS_REPORT_WRITE_ROUTE',
  DMS_REPORT_WRITE_CONSISTENCY = 'DMS_REPORT_WRITE_CONSISTENCY',
  DMS_REPORT_UPDATE_STATUS = 'DMS_REPORT_UPDATE_STATUS',
  DMS_REPORT_COMPRESS_EXPORT = 'DMS_REPORT_COMPRESS_EXPORT',
  DMS_REPORT_GET_DATA = 'DMS_REPORT_GET_DATA',
  DMS_REPORT_WRITE_COMPRESS = 'DMS_REPORT_WRITE_COMPRESS',
  DMS_REPORT_WRITE_ORDER_DETAIL = 'DMS_REPORT_WRITE_ORDER_DETAIL',
  DMS_REPORT_WRITE_SUMMARY_REPORT = 'DMS_REPORT_WRITE_SUMMARY_REPORT',
  DMS_REPORT_SYNC_DATABASE = 'DMS_REPORT_SYNC_DATABASE',
  DMS_REPORT_SYNC_DATABASE_STORE = 'DMS_REPORT_SYNC_DATABASE_STORE',
  DMS_REPORT_SYNC_DATABASE_ROUTE = 'DMS_REPORT_SYNC_DATABASE_ROUTE',
  DMS_REPORT_SYNC_DATABASE_CHECKSUM = 'DMS_REPORT_SYNC_DATABASE_CHECKSUM',
  DMS_REPORT_SYNC_DATABASE_EVENT = 'DMS_REPORT_SYNC_DATABASE_EVENT',
  DMS_REPORT_SYNC_DATABASE_ORDER = 'DMS_REPORT_SYNC_DATABASE_ORDER',
  DMS_REPORT_SYNC_DATABASE_INVENTORY = 'DMS_REPORT_SYNC_DATABASE_INVENTORY',
  DMS_SYNC_DATA = 'DMS_SYNC_DATA',
}

export type RabbitMQName = keyof typeof ENUM_QUEUES;

export type Topic<K = string> = Record<string, `${K & string}.${string}`>;
export type Command<K> = Record<string, { cmd: `${K & string}.${string}` }>;
export type Value<K = string> = {
  name: K;
  isAck?: boolean;
  prefetchCount?: number;
  topics?: Topic<K>;
  commands?: Command<K>;
  queueOptions?: RmqClientOptions['queueOptions'];
  socketOptions?: RmqClientOptions['socketOptions'];
};
export type Template<T> = {
  [K in T & string]: Value<K>;
};

export const RabbitMQConfig = {
  DMS_STORAGE_ROUTE: DMS_STORAGE_ROUTE,
  DMS_REPORT_READ_MOBILE: DMS_REPORT_READ_MOBILE,
  DMS_REPORT_READ_PORTAL: DMS_REPORT_READ_PORTAL,
  DMS_STORAGE: DMS_STORAGE,
  DMS_STORAGE_EVENT: DMS_STORAGE_EVENT,
  DMS_STORAGE_REAL_ROUTE: DMS_STORAGE_REAL_ROUTE,
  DMS_REPORT_SYNC: DMS_REPORT_SYNC,
  DMS_REPORT_WRITE: DMS_REPORT_WRITE,
  DMS_REPORT_WRITE_GENERATE_DATA: DMS_REPORT_WRITE_GENERATE_DATA,
  DMS_REPORT_WRITE_KPI: DMS_REPORT_WRITE_KPI,
  DMS_STORAGE_EVENT_ACCUMULATE: DMS_STORAGE_EVENT_ACCUMULATE,
  DMS_STORAGE_THIRD_PARTY_INTEGRATE: DMS_STORAGE_THIRD_PARTY_INTEGRATE,
  DMS_STORAGE_PROCESS_IMPORT: DMS_STORAGE_PROCESS_IMPORT,
  DMS_REPORT_READ_PLAN_ROUTE: DMS_REPORT_READ_PLAN_ROUTE,
  DMS_SAVE_HISTORY: DMS_SAVE_HISTORY,
  DMS_SAVE_ACTION_HISTORY: DMS_SAVE_ACTION_HISTORY,
  DMS_SCHEDULER_EVENT: DMS_SCHEDULER_EVENT,
  DMS_SCHEDULER_EVENT_ACCUMULATE: DMS_SCHEDULER_EVENT_ACCUMULATE,
  DMS_REPORT_WRITE_ROUTE: DMS_REPORT_WRITE_ROUTE,
  DMS_REPORT_WRITE_CONSISTENCY: DMS_REPORT_WRITE_CONSISTENCY,
  DMS_REPORT_UPDATE_STATUS: DMS_REPORT_UPDATE_STATUS,
  DMS_REPORT_COMPRESS_EXPORT: DMS_REPORT_COMPRESS_EXPORT,
  DMS_REPORT_GET_DATA: DMS_REPORT_GET_DATA,
  DMS_REPORT_WRITE_COMPRESS: DMS_REPORT_WRITE_COMPRESS,
  DMS_REPORT_WRITE_SUMMARY_REPORT: DMS_REPORT_WRITE_SUMMARY_REPORT,
  DMS_REPORT_WRITE_ORDER_DETAIL: DMS_REPORT_WRITE_ORDER_DETAIL,
  DMS_REPORT_SYNC_DATABASE: DMS_REPORT_SYNC_DATABASE,
  DMS_REPORT_SYNC_DATABASE_STORE: DMS_REPORT_SYNC_DATABASE_STORE,
  DMS_REPORT_SYNC_DATABASE_ROUTE: DMS_REPORT_SYNC_DATABASE_ROUTE,
  DMS_REPORT_SYNC_DATABASE_CHECKSUM: DMS_REPORT_SYNC_DATABASE_CHECKSUM,
  DMS_REPORT_SYNC_DATABASE_EVENT: DMS_REPORT_SYNC_DATABASE_EVENT,
  DMS_REPORT_SYNC_DATABASE_ORDER: DMS_REPORT_SYNC_DATABASE_ORDER,
  DMS_REPORT_SYNC_DATABASE_INVENTORY: DMS_REPORT_SYNC_DATABASE_INVENTORY,
  DMS_SYNC_DATA: DMS_SYNC_DATA,
} satisfies Template<RabbitMQName>;
